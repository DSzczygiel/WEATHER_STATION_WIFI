/*
 * BMP280.h
 *
 *  Created on: 16 lip 2020
 *      Author: Daniel
 *
 *      BMP280 temperature/air pressure i2c sensor
 */

#ifndef BMP280_H_
#define BMP280_H_

#include <avr/io.h>

#define BMP280_ADDRESS 0b11101100

#define BMP280_STANDBY_0_5MS 0
#define BMP280_STANDBY_62_5MS 0b00100000
#define BMP280_STANDBY_125MS 0b01000000
#define BMP280_STANDBY_250MS 0b01100000
#define BMP280_STANDBY_500MS 0b10000000
#define BMP280_STANDBY_1000MS 0b10100000
#define BMP280_STANDBY_2000MS 0b11000000
#define BMP280_STANDBY_4000MS 0b11100000

#define BMP280_FILTER_0 0
#define BMP280_FILTER_2 0b00000100
#define BMP280_FILTER_4 0b00001000
#define BMP280_FILTER_8 0b00001100
#define BMP280_FILTER_16 0b00011100

//ctrl_meas register
#define BMP280_T_OVERSAMPLING_0X 0
#define BMP280_T_OVERSAMPLING_1X 0b00100000
#define BMP280_T_OVERSAMPLING_2X 0b01000000
#define BMP280_T_OVERSAMPLING_4X 0b01100000
#define BMP280_T_OVERSAMPLING_8X 0b10000000
#define BMP280_T_OVERSAMPLING_16X 0b10100000

#define BMP280_P_OVERSAMPLING_0X 0
#define BMP280_P_OVERSAMPLING_1X 0b00000100
#define BMP280_P_OVERSAMPLING_2X 0b00001000
#define BMP280_P_OVERSAMPLING_4X 0b00001100
#define BMP280_P_OVERSAMPLING_8X 0b00010000
#define BMP280_P_OVERSAMPLING_16X 0b00010100

#define BMP280_MODE_SLEEP 0
#define BMP280_MODE_FORCED 0b00000010
#define BMP280_MODE_NORMAL 0b00000011

#define BMP280_RESET_VALUE = 0xB6

//register addresses
#define BMP280_CALIB_DATA_REGISTER 0x88
#define BMP280_CTRL_MEAS_REGISTER 0xF4
#define BMP280_CONFIG_REGISTER 0xF5
#define BMP280_PRESSURE_REGISTER 0xF7
#define BMP280_RESET_REGISTER 0xE0

typedef int32_t BMP280_S32_t;
typedef uint32_t BMP280_U32_t;


struct bmp280_data{
	int8_t tempInteger;
	uint8_t tempFraction;
	uint16_t pressureInteger;
	uint8_t pressureFraction;
};

void bmp280_init();
BMP280_S32_t bmp280_getData();

#endif /* BMP280_H_ */
